#include <iostream>
#include <iterator>
#include "AAVector.hpp"

template <typename T>
AAVector<T>::AAVector(int capacity)
{
  this->capacity = capacity;
  this->size = 0;
  vecPtr = new T[capacity];
}

template <typename T>
int AAVector<T>::push_back(T item)
{
  if (size == capacity)
  {

    T *tmpVec = new T[capacity * 2];

    for (int i = 0; i < capacity; i++)
    {
      *(tmpVec + i) = *(vecPtr + i);
    }

    delete[] vecPtr;
    vecPtr = move(tmpVec);
    capacity *= 2;
  }

  vecPtr[size++] = item;
  return size;
}

template <typename T>
T &AAVector<T>::operator[](int index)
{
  if (index >= size)
  {
    try
    {
      throw "OUTOFRANGE";
    }

    catch (...)
    {

      cout << "Invalid Index.(index: " << index << " > size: " << size << ").Returned the last element of the vector" << endl;
      return vecPtr[size - 1];
    }
  }
  return vecPtr[index];
}

template <typename T>
T AAVector<T>::pop_back()
{
  if (size == 0)
  {
    cout << "Empty vector";
    return *vecPtr;
  }
  // return vecPtr[size - 1] and decrement size by 1
  return vecPtr[--size];
}

template <typename T>
bool AAVector<T>::empty()
{
  return (this->size == 0);
}

template <typename T>
void AAVector<T>::erase(Iterator it)
{
  if (this->begin() > it || this->end() < it)
  {
    try
    {
      throw "OUTOFRANGE";
    }

    catch (...)
    {
      cout << "INVALID ITERATOR: OUTOFRANGE, Did not erase anything.\n";
      return;
    }
  }

  if (it == this->end())
  {
    --size;
    return;
  }

  T *tmpVec = new T[capacity];
  int i = 0;
  for (auto v = this->begin(); v != this->end(); v++)
  {
    // Copy all elements from this->VecPtr to tmpVec EXCEPT the item iterator at
    if (v != it)
    {
      // counter++;
      tmpVec[i++] = *v;
    }
  }
  // Copying the last element
  tmpVec[size - 1] = *(this->end());
  delete[] vecPtr;
  --size;
  vecPtr = move(tmpVec);
}
template <typename T>
void AAVector<T>::insert(Iterator it, T item)
{
  ++size;
  if (size >= capacity)
  {
    vecPtr = new T[capacity * 2];
  }
  
  for (auto i = ++this->end(); i > it; --i)
  {
    *i = *(i-1); // shifting elements to the right by one
  }
  *it = item; // insert the element at the given iterator position
}
// 2 3 5 6 7 
// 2 3 5 6 7 ()
// 2 3 () 5 6 7
template <typename T>
void AAVector<T>::erase(Iterator it1, Iterator it2)
{
  AAVector<T>::Iterator begin(vecPtr);
  AAVector<T>::Iterator end(vecPtr + size - 1);

  if (it1 > it2)
  {
    try
    {
      throw "ITERATOR1 < ITERATOR2";
    }

    catch (...)
    {
      cout << "INVALID ITERATORS: it1 > it2, Did not erase anything.\n";
      return;
    }
  }
  else if (it1 < begin || it2 > end)
  {
    try
    {
      throw "OUTOFRANGE";
    }

    catch (...)
    {
      cout << "INVALID ITERATORS: OUTOFRANGE, Did not erase anything.\n";
      return;
    }
  }

  // FOCUS BOY
  Iterator it = ++this->end();
  int counter = 0;
  int i = 0;
  T *tmpVec = new T[capacity];
  for (auto v = this->begin(); v != it; v++)
  {
    if (it1 == v && it2 == v)
    {
      --size;
      continue;
    }
    else if (it1 == v)
    {
      it1++;
      --size;
      continue;
    }

    tmpVec[i++] = *v;
  }

  delete[] vecPtr;
  vecPtr = move(tmpVec);
}

template <typename T>
void AAVector<T>::resize(int newSize)
{
  if (newSize < capacity && newSize > size)
  {
    for (int i = size; i < newSize; i++)
    {
      *(vecPtr + i) = 0;
    }
    size = newSize;
  }
  else if (newSize > capacity)
  {
    T *tmpVec = new T[newSize * 2];
    for (int i = 0; i < newSize; i++)
    {
      if (i >= size)
      {
        tmpVec[i] = 0;
        continue;
      }
      *(tmpVec + i) = *(vecPtr + i);
    }
    delete[] vecPtr;
    size = newSize;
    capacity = newSize * 2;
    vecPtr = move(tmpVec);
  }
  else if (newSize < size)
  {
    size = newSize;
  }
}

template <typename T>
void AAVector<T>::clear()
{
  size = 0;
}

template <typename T>
bool AAVector<T>::operator==(const AAVector<T> &vec2)
{
  if (size == vec2.size)
  {
    for (int i = 0; i < size; i++)
    {
      if (vecPtr[i] != vec2.vecPtr[i])
      {
        return false;
      }
    }
    return true;
  }
  else
  {
    return false;
  }
}

template <typename T>
bool AAVector<T>::operator<(const AAVector<T> &vec2)
{
  if (this->size < vec2.size)
  {
    return true;
  }
  else if (this->size > vec2.size)
  {
    return false;
  }
  else if (this->size == vec2.size)
  {
    int countEquality = 0;
    for (int i = 0; i < size; i++)
    {
      if (this->vecPtr[i] > vec2.vecPtr[i])
      {
        return false;
      }
      else if (this->vecPtr[i] == vec2.vecPtr[i])
      {
        ++countEquality;
      }
    }
    if (countEquality == size)
    {
      return false;
    }
    return true;
  }
  // 1 2 3
  // 1 2 3
  else
  {
    return false;
  }
}

template <typename T>
AAVector<T>::AAVector(const AAVector<T> &anotherVec)
{
  cout << "Copy Constructor \n";
  this->size = anotherVec.size;
  this->capacity = anotherVec.capacity;
  this->vecPtr = new T[capacity];
  for (int i = 0; i < size; ++i)
  {
    this->vecPtr[i] = anotherVec.vecPtr[i];
  }
}

template <typename T>
AAVector<T> &AAVector<T>::operator=(const AAVector<T> &anotherVec)
{
  cout << "Copy Assignment\n";
  this->size = anotherVec.size;
  this->capacity = anotherVec.capacity;
  delete[] this->vecPtr;
  this->vecPtr = new T[capacity];
  for (int i = 0; i < size; ++i)
  {
    this->vecPtr[i] = anotherVec.vecPtr[i];
  }
  return *this;
}

template <typename T>
AAVector<T> &AAVector<T>::operator=(const AAVector<T> &&anotherVec)
{
  cout << "Move Constructor\n";
  if (this != &anotherVec)
  {
    this->size = anotherVec.size;
    this->capacity = anotherVec.capacity;
    delete[] this->vecPtr;
    this->vecPtr = anotherVec.vecPtr;
    for (int i = 0; i < size; ++i)
    {
      this->vecPtr[i] = anotherVec.vecPtr[i];
    }
    anotherVec.vecPtr = nullptr;
    return *this;
  }
}
template <typename T>
AAVector<T>::AAVector(T *arr, int nitems)
{
  this->vecPtr = new T[nitems];
  this->size = nitems;
  this->capacity = size * 2;
  for (int i = 0; i < size; ++i)
  {
    this->vecPtr[i] = arr[i];
  }
}
template <typename T>
AAVector<T>::~AAVector()
{
  delete[] this->vecPtr;
}
